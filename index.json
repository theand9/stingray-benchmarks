{"project": "StingraySoftware/stingray", "project_url": "https://stingray.readthedocs.io/", "show_commit_url": "https://github.com/StingraySoftware/stingray/commits", "hash_length": 8, "revision_to_hash": {"1913": "d429e99852e2708b1e3ab026fc86b9dbfae5f43f", "2144": "08b77654a18331c1745c34e340bfc8db83f22411", "2160": "a5e9830cc55086537d532eab2872aa7332a7e5f3", "2162": "afdb6a5e0d52ada7e2150831710b9b8bb60c223f", "2165": "955b0d4a5920b05c293c70409540a16d512d7130", "2512": "cf517f1304485a7b3d0de7187e877da65cdf2bbc"}, "revision_to_date": {"1913": 1518454471000, "2144": 1559191012000, "2160": 1560204023000, "2162": 1560211728000, "2165": 1560212798000, "2512": 1592377776000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz"], "machine": ["BeastMode"], "num_cpu": ["12"], "os": ["Linux 5.4.0-39-generic"], "ram": ["16009492"], "python": ["3.6"], "astropy": [""], "matplotlib": [""], "numpy": [""], "scipy": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz", "machine": "BeastMode", "num_cpu": "12", "os": "Linux 5.4.0-39-generic", "ram": "16009492", "python": "3.6", "astropy": "", "matplotlib": "", "numpy": "", "scipy": "", "branch": "master"}], "benchmarks": {"bench_Avg_Crossspectrum.AveragedCrossspectrum.time_lag": {"code": "class AveragedCrossspectrum:\n    def time_lag(self):\n        \"\"\"Calculate time lag and uncertainty.\n    \n        Equation from Bendat & Piersol, 2011 [bendat-2011]__.\n    \n        Returns\n        -------\n        lag : np.ndarray\n            The time lag\n    \n        lag_err : np.ndarray\n            The uncertainty in the time lag\n        \"\"\"\n        lag = super(AveragedCrossspectrum, self).time_lag()\n        coh, uncert = self.coherence()\n    \n        dum = (1. - coh) / (2. * coh)\n    \n        dum[coh == 0] = 0.0\n    \n        lag_err = np.sqrt(dum / self.m) / (2 * np.pi * self.freq)\n    \n        return lag, lag_err", "min_run_count": 2, "name": "bench_Avg_Crossspectrum.AveragedCrossspectrum.time_lag", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be2b4b2f1bded6dc4183f82837b0469d97e7111293820bdbc2d149effc806a06", "warmup_time": -1}, "bench_Avg_Crossspectrum.Coherence.peakmem_coher": {"code": "class Coherence:\n    def peakmem_coher(self, array_size):\n        self.avg_Cspec.coherence()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.avg_Cspec = AveragedCrossspectrum(lc1, lc2, 1000, silent=True)", "name": "bench_Avg_Crossspectrum.Coherence.peakmem_coher", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "7a172820c8a10aa7078d2133acf836884c1dab694c175c19253a1b61781a9ee3"}, "bench_Avg_Crossspectrum.Coherence.time_coher": {"code": "class Coherence:\n    def time_coher(self, array_size):\n        self.avg_Cspec.coherence()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.avg_Cspec = AveragedCrossspectrum(lc1, lc2, 1000, silent=True)", "min_run_count": 2, "name": "bench_Avg_Crossspectrum.Coherence.time_coher", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "b5e3d432973daa6333f346ad4ad493a37e9a035a1b042d40ada0af3c9de5a91f", "warmup_time": -1}, "bench_Avg_Crossspectrum.Init.peakmem_init": {"code": "class Init:\n    def peakmem_init(self, array_size):\n        AveragedCrossspectrum(self.lc1, self.lc2, 1000, silent=True)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts + np.random.rand() * 10,\n                              dt=1.0,\n                              skip_checks=True)", "name": "bench_Avg_Crossspectrum.Init.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "580427d985abe2db851c7269705e2825e1040f586099aaf7d1ab5b686190a0d8"}, "bench_Avg_Crossspectrum.Init.time_init": {"code": "class Init:\n    def time_init(self, array_size):\n        AveragedCrossspectrum(self.lc1, self.lc2, 1000, silent=True)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts + np.random.rand() * 10,\n                              dt=1.0,\n                              skip_checks=True)", "min_run_count": 2, "name": "bench_Avg_Crossspectrum.Init.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "c8f554ee236139c5c3e4841b514aebca0495ca97c5d7de18a8bd64d88277abcc", "warmup_time": -1}, "bench_Avg_Crossspectrum.TimeLag.peakmem_Tlag": {"code": "class TimeLag:\n    def peakmem_Tlag(self, array_size):\n        self.avg_Cspec.time_lag()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.avg_Cspec = AveragedCrossspectrum(lc1, lc2, 1000, silent=True)", "name": "bench_Avg_Crossspectrum.TimeLag.peakmem_Tlag", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "c2a686e2b96b97fe91eac3596cc0c305481435acc2aefb33cf3a0aed8d15c7dc"}, "bench_Avg_Crossspectrum.TimeLag.time_Tlag": {"code": "class TimeLag:\n    def time_Tlag(self, array_size):\n        self.avg_Cspec.time_lag()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.avg_Cspec = AveragedCrossspectrum(lc1, lc2, 1000, silent=True)", "min_run_count": 2, "name": "bench_Avg_Crossspectrum.TimeLag.time_Tlag", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "b71a2bc463b7ee6ed1cf073fc4bc06241231b38205aa355de50dd5074e9bdc45", "warmup_time": -1}, "bench_Avg_Powerspectrum.AveragedPowerspectrum.time_lag": {"code": "class AveragedCrossspectrum:\n    def time_lag(self):\n        \"\"\"Calculate time lag and uncertainty.\n    \n        Equation from Bendat & Piersol, 2011 [bendat-2011]__.\n    \n        Returns\n        -------\n        lag : np.ndarray\n            The time lag\n    \n        lag_err : np.ndarray\n            The uncertainty in the time lag\n        \"\"\"\n        lag = super(AveragedCrossspectrum, self).time_lag()\n        coh, uncert = self.coherence()\n    \n        dum = (1. - coh) / (2. * coh)\n    \n        dum[coh == 0] = 0.0\n    \n        lag_err = np.sqrt(dum / self.m) / (2 * np.pi * self.freq)\n    \n        return lag, lag_err", "min_run_count": 2, "name": "bench_Avg_Powerspectrum.AveragedPowerspectrum.time_lag", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be2b4b2f1bded6dc4183f82837b0469d97e7111293820bdbc2d149effc806a06", "warmup_time": -1}, "bench_Avg_Powerspectrum.Init.peakmem_init": {"code": "class Init:\n    def peakmem_init(self, array_size):\n        AveragedPowerspectrum(self.lc, 1000)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Avg_Powerspectrum.Init.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "c1703eb7e3f5d2e5a4c6cad49585b72dcb836288412ef69c29225c99bf83fab1"}, "bench_Avg_Powerspectrum.Init.time_init": {"code": "class Init:\n    def time_init(self, array_size):\n        AveragedPowerspectrum(self.lc, 1000)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Avg_Powerspectrum.Init.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "8e12990e1cdc5583b307bf686f7d1b0f1d875ec857b237f04683165e663ca794", "warmup_time": -1}, "bench_Crossspectrum.ClassicalSignificances.peakmem_classSign": {"code": "class ClassicalSignificances:\n    def peakmem_classSign(self, array_size):\n        self.Cspec.classical_significances()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2, norm='leahy')", "name": "bench_Crossspectrum.ClassicalSignificances.peakmem_classSign", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "cfb407b0740d3d361095d91de2bc98654181f2ec7e97651a4b07d5399671e631"}, "bench_Crossspectrum.ClassicalSignificances.time_classSign": {"code": "class ClassicalSignificances:\n    def time_classSign(self, array_size):\n        self.Cspec.classical_significances()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2, norm='leahy')", "min_run_count": 2, "name": "bench_Crossspectrum.ClassicalSignificances.time_classSign", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "d02fa1ac7ba36d7ee916753cb5a3e1909d861680b051d399e3ec7855f4434c7e", "warmup_time": -1}, "bench_Crossspectrum.Coherence.peakmem_coher": {"code": "class Coherence:\n    def peakmem_coher(self, array_size):\n        self.Cspec.coherence()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)", "name": "bench_Crossspectrum.Coherence.peakmem_coher", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "20113ff00c156af8d978db0b59b3df5bf8812e9b46cb9a3bb9771d54fca0c370"}, "bench_Crossspectrum.Coherence.time_coher": {"code": "class Coherence:\n    def time_coher(self, array_size):\n        self.Cspec.coherence()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)", "min_run_count": 2, "name": "bench_Crossspectrum.Coherence.time_coher", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "06afe14f516afc115ac43f72499625e3e43407d9cc4c455439aaeab194d4a949", "warmup_time": -1}, "bench_Crossspectrum.Crossspectrum.time_lag": {"code": "class Crossspectrum:\n    def time_lag(self):\n        \"\"\"\n        Calculate the fourier time lag of the cross spectrum. The time lag is\n        calculate using the center of the frequency bins.\n        \"\"\"\n        if self.__class__ in [Crossspectrum, AveragedCrossspectrum]:\n            ph_lag = self._phase_lag()\n    \n            return ph_lag / (2 * np.pi * self.freq)\n        else:\n            raise AttributeError(\"Object has no attribute named 'time_lag' !\")", "min_run_count": 2, "name": "bench_Crossspectrum.Crossspectrum.time_lag", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc921d5cf17cf438b9e5d451003a61866769ae1a98cfe74a21648ba1a6685a1b", "warmup_time": -1}, "bench_Crossspectrum.Init.peakmem_init": {"code": "class Init:\n    def peakmem_init(self, array_size):\n        Crossspectrum(self.lc1, self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts + np.random.rand() * 10,\n                              dt=1.0,\n                              skip_checks=True)", "name": "bench_Crossspectrum.Init.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "71c638e4e8acbed22170671324b9c3e84198a4efa8cba652e7c6f0ba6da18373"}, "bench_Crossspectrum.Init.time_init": {"code": "class Init:\n    def time_init(self, array_size):\n        Crossspectrum(self.lc1, self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts + np.random.rand() * 10,\n                              dt=1.0,\n                              skip_checks=True)", "min_run_count": 2, "name": "bench_Crossspectrum.Init.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "1ea66f2248e56d47bcccfd190721f6f96140c12b1964ec8a40fe3b7a87d50023", "warmup_time": -1}, "bench_Crossspectrum.Rebin.peakmem_log_rebin": {"code": "class Rebin:\n    def peakmem_log_rebin(self, array_size):\n        self.Cspec.rebin(f=1.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)\n        print(self.Cspec.freq)", "name": "bench_Crossspectrum.Rebin.peakmem_log_rebin", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "5fc711932147d5990c7f1d8e41dd6abed23b90714ccf530c65ec01895b499219"}, "bench_Crossspectrum.Rebin.peakmem_rebin": {"code": "class Rebin:\n    def peakmem_rebin(self, array_size):\n        self.Cspec.rebin(df=2.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)\n        print(self.Cspec.freq)", "name": "bench_Crossspectrum.Rebin.peakmem_rebin", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "4df5f876e40c1d900a00149ed840bba1b5d9b3c5511f3cfde0de84fc712b3a2a"}, "bench_Crossspectrum.Rebin.time_log_rebin": {"code": "class Rebin:\n    def time_log_rebin(self, array_size):\n        self.Cspec.rebin(f=1.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)\n        print(self.Cspec.freq)", "min_run_count": 2, "name": "bench_Crossspectrum.Rebin.time_log_rebin", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "5e6cf60749d1e7e44693d6d4cce2fa8d356a761b066dbb82c0dcbdc50c3aa24a", "warmup_time": -1}, "bench_Crossspectrum.Rebin.time_rebin": {"code": "class Rebin:\n    def time_rebin(self, array_size):\n        self.Cspec.rebin(df=2.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)\n        print(self.Cspec.freq)", "min_run_count": 2, "name": "bench_Crossspectrum.Rebin.time_rebin", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "85af8437a9a6092260eb9c117c73a0cc87fe4bcf1e17c830e67a5cd2648a90b7", "warmup_time": -1}, "bench_Crossspectrum.TimeLag.peakmem_Tlag": {"code": "class TimeLag:\n    def peakmem_Tlag(self, array_size):\n        self.Cspec.time_lag()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)", "name": "bench_Crossspectrum.TimeLag.peakmem_Tlag", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "f7398d588d07d2834624ef12bd21857a8f1eafd3a2740bf6c343cec59c3e6bff"}, "bench_Crossspectrum.TimeLag.time_Tlag": {"code": "class TimeLag:\n    def time_Tlag(self, array_size):\n        self.Cspec.time_lag()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        lc2 = Lightcurve(times,\n                         counts + np.random.rand() * 10,\n                         dt=1.0,\n                         skip_checks=True)\n        self.Cspec = Crossspectrum(lc1, lc2)", "min_run_count": 2, "name": "bench_Crossspectrum.TimeLag.time_Tlag", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "e0af2b96f2d0984a274c2c6f87410ff8c166dce604980408de69e22df148a2f7", "warmup_time": -1}, "bench_Lightcurve.AddLightcurve.peakmem_bench": {"code": "class AddLightcurve:\n    def peakmem_bench(self, array_size):\n        self.lc1.__add__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "name": "bench_Lightcurve.AddLightcurve.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "5d4aad9cecec818ae390252c55e87e16bc317801023b9e73b3dba9a8a4b2b3e1"}, "bench_Lightcurve.AddLightcurve.time_bench": {"code": "class AddLightcurve:\n    def time_bench(self, array_size):\n        self.lc1.__add__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.AddLightcurve.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "f3ba68422298aa5e709af13484c7549d2a5dcc6cd5f46bc0dca64e0ce7cb13e8", "warmup_time": -1}, "bench_Lightcurve.AnalyzeChunks.peakmem_bench": {"code": "class AnalyzeChunks:\n    def peakmem_bench(self, array_size):\n        self.lc.analyze_lc_chunks(1000, lambda x: np.mean(x))\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.AnalyzeChunks.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "d3686e88f86187d6d07d3b6213640787c925698ae3223d19700a444828e55807"}, "bench_Lightcurve.AnalyzeChunks.time_bench": {"code": "class AnalyzeChunks:\n    def time_bench(self, array_size):\n        self.lc.analyze_lc_chunks(1000, lambda x: np.mean(x))\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.AnalyzeChunks.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "e320e50699b2ba349631c4ab862ca86ffb3890d7470185c5146bf948ca97d7e7", "warmup_time": -1}, "bench_Lightcurve.ApplyGTI.peakmem_bench": {"code": "class ApplyGTI:\n    def peakmem_bench(self, array_size):\n        self.lc.apply_gtis()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.ApplyGTI.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "f7a225057199bf583c683b084dce16861d44e9b675d4c7c00c9daab887be5182"}, "bench_Lightcurve.ApplyGTI.time_bench": {"code": "class ApplyGTI:\n    def time_bench(self, array_size):\n        self.lc.apply_gtis()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.ApplyGTI.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "662da3aeb25ee872af73b58b00b10dbcaec609c00eb75947acce6846dbc9c913", "warmup_time": -1}, "bench_Lightcurve.ChangeMJDREF.peakmem_MJD": {"code": "class ChangeMJDREF:\n    def peakmem_MJD(self, array_size):\n        self.lc.change_mjdref(-2379826)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.ChangeMJDREF.peakmem_MJD", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "fa71e7d5ac3fe133176a05e6811ac3b3247c98936c59f3403ed298ec5e0b1dd8"}, "bench_Lightcurve.ChangeMJDREF.time_MJD": {"code": "class ChangeMJDREF:\n    def time_MJD(self, array_size):\n        self.lc.change_mjdref(-2379826)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.ChangeMJDREF.time_MJD", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "d520f995c01ffbe86eb28cf3bf10c3a6aaa30c64ca8e8047cd7833cb7f24fb6f", "warmup_time": -1}, "bench_Lightcurve.CheckEqLightcurve.peakmem_bench": {"code": "class CheckEqLightcurve:\n    def peakmem_bench(self, array_size):\n        self.lc1.__eq__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.CheckEqLightcurve.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "6a740800151d1ef9bdb254469e6eb28ba9abde264ab258301ac66a75a9a98fe3"}, "bench_Lightcurve.CheckEqLightcurve.time_bench": {"code": "class CheckEqLightcurve:\n    def time_bench(self, array_size):\n        self.lc1.__eq__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.CheckEqLightcurve.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "59c1815091acce8c1cf0bc4ad3444291e390265ff8f79afc45653c4a27643f4d", "warmup_time": -1}, "bench_Lightcurve.EstimateChunkLength.peakmem_bench": {"code": "class EstimateChunkLength:\n    def peakmem_bench(self, array_size):\n        self.lc.estimate_chunk_length(100, 100)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.EstimateChunkLength.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "45e915578428cd365bbff77707ce0148c2aeb4fe196357b2dfe0ab60d385f505"}, "bench_Lightcurve.EstimateChunkLength.time_bench": {"code": "class EstimateChunkLength:\n    def time_bench(self, array_size):\n        self.lc.estimate_chunk_length(100, 100)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.EstimateChunkLength.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "4132728dc30153c8dcd7ee3786f8839b7ed37ab8f05a92a196953e1fca601dd0", "warmup_time": -1}, "bench_Lightcurve.Init.peakmem_no_param": {"code": "class Init:\n    def peakmem_no_param(self, array_size):\n        Lightcurve(self.times, self.counts)\n\n    def setup(self, array_size):\n        self.times = np.arange(array_size)\n        self.counts = np.random.rand(array_size) * 100", "name": "bench_Lightcurve.Init.peakmem_no_param", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "da41b6f973b37bd3d324fb671f6ce5cda6f19f137aed84e1c913468b4cb982cf"}, "bench_Lightcurve.Init.peakmem_param": {"code": "class Init:\n    def peakmem_param(self, array_size):\n        Lightcurve(self.times, self.counts, dt=1.0, skip_checks=True)\n\n    def setup(self, array_size):\n        self.times = np.arange(array_size)\n        self.counts = np.random.rand(array_size) * 100", "name": "bench_Lightcurve.Init.peakmem_param", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "bb36875d307ed699055c132fb96f9d26d4261460be6aaac0403d56a76ec4dfb1"}, "bench_Lightcurve.Init.time_no_param": {"code": "class Init:\n    def time_no_param(self, array_size):\n        Lightcurve(self.times, self.counts)\n\n    def setup(self, array_size):\n        self.times = np.arange(array_size)\n        self.counts = np.random.rand(array_size) * 100", "min_run_count": 2, "name": "bench_Lightcurve.Init.time_no_param", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "cd12fa9ea20e59e17645672be69e10fe10613aa6ddd81717097c80b779e0fabe", "warmup_time": -1}, "bench_Lightcurve.Init.time_param": {"code": "class Init:\n    def time_param(self, array_size):\n        Lightcurve(self.times, self.counts, dt=1.0, skip_checks=True)\n\n    def setup(self, array_size):\n        self.times = np.arange(array_size)\n        self.counts = np.random.rand(array_size) * 100", "min_run_count": 2, "name": "bench_Lightcurve.Init.time_param", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "adf62e94c96455645bbd19165f86fea83cae61c2f2a2d420925bbb1d850080e2", "warmup_time": -1}, "bench_Lightcurve.Join.peakmem_bench": {"code": "class Join:\n    def peakmem_bench(self, array_size):\n        self.lc1.join(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "name": "bench_Lightcurve.Join.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "0a649df600674701cb97eab2c9d09bafe2de18bbb380de3c2bd58ce85b21b0cb"}, "bench_Lightcurve.Join.time_bench": {"code": "class Join:\n    def time_bench(self, array_size):\n        self.lc1.join(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Join.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "76179919fd1be057b96fe32b40be656501415df2ac3b2380795434155c9215d3", "warmup_time": -1}, "bench_Lightcurve.NegLightcurve.peakmem_bench": {"code": "class NegLightcurve:\n    def peakmem_bench(self, array_size):\n        self.lc.__neg__()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.NegLightcurve.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "13df492eb885f8b0ebb019ff54e880b38c82c4c3db3346de5a6590f598d4c2b3"}, "bench_Lightcurve.NegLightcurve.time_bench": {"code": "class NegLightcurve:\n    def time_bench(self, array_size):\n        self.lc.__neg__()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.NegLightcurve.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "eee456cf4ed949c139175529e7a0bfb4c2f3bcd1e35171eb487d4b97850a725d", "warmup_time": -1}, "bench_Lightcurve.Rebin.peakmem_rebin_mean_avg": {"code": "class Rebin:\n    def peakmem_rebin_mean_avg(self, array_size):\n        self.lc.rebin(2.0, method='avg')\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Rebin.peakmem_rebin_mean_avg", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "043a12e6bc53e338eba9327e5e910e3c2d1080073d120c0450edcbcc69362270"}, "bench_Lightcurve.Rebin.peakmem_rebin_sum": {"code": "class Rebin:\n    def peakmem_rebin_sum(self, array_size):\n        self.lc.rebin(2.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Rebin.peakmem_rebin_sum", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "d830144d587defca542beb8d86800a87cead0ff9adddd481c2e2b9c80972d6c0"}, "bench_Lightcurve.Rebin.time_rebin_mean_avg": {"code": "class Rebin:\n    def time_rebin_mean_avg(self, array_size):\n        self.lc.rebin(2.0, method='avg')\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Rebin.time_rebin_mean_avg", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "c73afb8c6f1c5c8fd9d8f38c3219dbe8c6934989f13b8a71d61aa7935eb49d91", "warmup_time": -1}, "bench_Lightcurve.Rebin.time_rebin_sum": {"code": "class Rebin:\n    def time_rebin_sum(self, array_size):\n        self.lc.rebin(2.0)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Rebin.time_rebin_sum", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "0f581c7042411a2ae2f481881efb6cd765274d2ec10adc3728ce92140369c65f", "warmup_time": -1}, "bench_Lightcurve.Sort.peakmem_sort_counts": {"code": "class Sort:\n    def peakmem_sort_counts(self, array_size):\n        self.lc.sort_counts()\n\n    def setup(self, array_size):\n        times = np.random.rand(array_size) * 10\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Sort.peakmem_sort_counts", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "e4aea706be30c7b402fbd1543a03c13947f921ee91fcdcab70939934cfd78288"}, "bench_Lightcurve.Sort.peakmem_sort_times": {"code": "class Sort:\n    def peakmem_sort_times(self, array_size):\n        self.lc.sort()\n\n    def setup(self, array_size):\n        times = np.random.rand(array_size) * 10\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Sort.peakmem_sort_times", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "84ee98bcd831117d820fb092c3895e1d4924808d2bd5bea73d475e4a1858fe8e"}, "bench_Lightcurve.Sort.time_sort_counts": {"code": "class Sort:\n    def time_sort_counts(self, array_size):\n        self.lc.sort_counts()\n\n    def setup(self, array_size):\n        times = np.random.rand(array_size) * 10\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Sort.time_sort_counts", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "2dd6b7a5d9340d089a1e366dddaaba39091ce238d44b3ed99d5f7287d9582f72", "warmup_time": -1}, "bench_Lightcurve.Sort.time_sort_times": {"code": "class Sort:\n    def time_sort_times(self, array_size):\n        self.lc.sort()\n\n    def setup(self, array_size):\n        times = np.random.rand(array_size) * 10\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Sort.time_sort_times", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "00ac50fc3156ff0b68c8a34e90e2e099654d61168bde6618ff041ef37d70a75b", "warmup_time": -1}, "bench_Lightcurve.Split.peakmem_bench": {"code": "class Split:\n    def peakmem_bench(self, array_size):\n        self.lc.split(4)\n\n    def setup(self, array_size):\n        times = np.arange(0, array_size, np.random.randint(4, 9))\n        counts = np.random.rand(len(times)) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Split.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "bf0a3a9c85ec36d3b586cae1d41ba77a71c10dd6097394fa60515e3624906f06"}, "bench_Lightcurve.Split.time_bench": {"code": "class Split:\n    def time_bench(self, array_size):\n        self.lc.split(4)\n\n    def setup(self, array_size):\n        times = np.arange(0, array_size, np.random.randint(4, 9))\n        counts = np.random.rand(len(times)) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Split.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "6720461cd05cd70fc3b12a077e6b675ae1c72cfbfebb7f82a07dd664c00fc869", "warmup_time": -1}, "bench_Lightcurve.SplitGTI.peakmem_bench": {"code": "class SplitGTI:\n    def peakmem_bench(self, array_size):\n        self.lc.split_by_gti()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.SplitGTI.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "53ba700f46f2bb64e5638ab6432f7f2e82ede3a04a23f946957f3e8353428a4a"}, "bench_Lightcurve.SplitGTI.time_bench": {"code": "class SplitGTI:\n    def time_bench(self, array_size):\n        self.lc.split_by_gti()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.SplitGTI.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "b396f0341c46d7c33380a28fc205204c63cb74aa8db091da7c5c4edde1a844d9", "warmup_time": -1}, "bench_Lightcurve.SubLightcurve.peakmem_bench": {"code": "class SubLightcurve:\n    def peakmem_bench(self, array_size):\n        self.lc1.__sub__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "name": "bench_Lightcurve.SubLightcurve.peakmem_bench", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "c2c8b5c000502d19d3496bc60f82776a3c8621ea4ea2e8a9aac5789c29d530e5"}, "bench_Lightcurve.SubLightcurve.time_bench": {"code": "class SubLightcurve:\n    def time_bench(self, array_size):\n        self.lc1.__sub__(self.lc2)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc1 = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n        self.lc2 = Lightcurve(times,\n                              counts * np.random.rand(array_size),\n                              dt=1.0,\n                              skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.SubLightcurve.time_bench", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "0b66c8c53665285929607f32439dc8e0932cb51da1e58e84e14a430d4b6632a1", "warmup_time": -1}, "bench_Lightcurve.Truncate.peakmem_trunc_index": {"code": "class Truncate:\n    def peakmem_trunc_index(self, array_size):\n        self.lc.truncate(0, 1000)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Truncate.peakmem_trunc_index", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "445c21607d8e6e79870ccfb9db21db5a0db33a99c8cf50626808d87f2dceaf7d"}, "bench_Lightcurve.Truncate.peakmem_trunc_time": {"code": "class Truncate:\n    def peakmem_trunc_time(self, array_size):\n        self.lc.truncate(0, array_size / 2, method='time')\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Lightcurve.Truncate.peakmem_trunc_time", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "4396dc51e036aaf1f04d99ff413d543faa4b08460d9d910f446b6bcf9f1b7dd5"}, "bench_Lightcurve.Truncate.time_trunc_index": {"code": "class Truncate:\n    def time_trunc_index(self, array_size):\n        self.lc.truncate(0, 1000)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Truncate.time_trunc_index", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "fac7e70271f4ac1a8a6cbe3b477266886a1a3bd1fd619919eed657993be7d366", "warmup_time": -1}, "bench_Lightcurve.Truncate.time_trunc_time": {"code": "class Truncate:\n    def time_trunc_time(self, array_size):\n        self.lc.truncate(0, array_size / 2, method='time')\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Lightcurve.Truncate.time_trunc_time", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "c9d705233240254423ac34ade1a00f3ff9c767617d2dc82f655a2627fff02522", "warmup_time": -1}, "bench_Powerspectrum.ClassificalSignificance.peakmem_class_sign": {"code": "class ClassificalSignificance:\n    def peakmem_class_sign(self, array_size):\n        self.pspec.classical_significances()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc, norm=\"leahy\")", "name": "bench_Powerspectrum.ClassificalSignificance.peakmem_class_sign", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "76dea655535bcb2ba156f6a8eaf21db4365037e888f0fc4ba6d1ef41984550d9"}, "bench_Powerspectrum.ClassificalSignificance.time_class_sign": {"code": "class ClassificalSignificance:\n    def time_class_sign(self, array_size):\n        self.pspec.classical_significances()\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc, norm=\"leahy\")", "min_run_count": 2, "name": "bench_Powerspectrum.ClassificalSignificance.time_class_sign", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "978b9ad9966150538021ac27a04fa8f25fe86a3eb2790a9269d8d3b4b5be6974", "warmup_time": -1}, "bench_Powerspectrum.ComputeRMS.peakmem_init": {"code": "class ComputeRMS:\n    def peakmem_init(self, array_size):\n        self.pspec.compute_rms(min_freq=0.001, max_freq=0.499)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc)", "name": "bench_Powerspectrum.ComputeRMS.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "81c1123ae9f709f704984edd6060bdb8f008162ecde9f4e990b2f9f12aeef50f"}, "bench_Powerspectrum.ComputeRMS.time_init": {"code": "class ComputeRMS:\n    def time_init(self, array_size):\n        self.pspec.compute_rms(min_freq=0.001, max_freq=0.499)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc)", "min_run_count": 2, "name": "bench_Powerspectrum.ComputeRMS.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "bdf95a400247ae951e6c383289d92693f424d94c3c4640c44dac819eae675881", "warmup_time": -1}, "bench_Powerspectrum.Init.peakmem_init": {"code": "class Init:\n    def peakmem_init(self, array_size):\n        Powerspectrum(self.lc)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "name": "bench_Powerspectrum.Init.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "0b9664264482bd487e4b0df546ed036b00e1a2b028c94d58b52dd0f334a21b91"}, "bench_Powerspectrum.Init.time_init": {"code": "class Init:\n    def time_init(self, array_size):\n        Powerspectrum(self.lc)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n    \n        self.lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)", "min_run_count": 2, "name": "bench_Powerspectrum.Init.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "7dcae6ca9ea04670881e2dffef07378034cfeda262efca4cc11934b8ac964e6c", "warmup_time": -1}, "bench_Powerspectrum.Powerspectrum.time_lag": {"code": "class Crossspectrum:\n    def time_lag(self):\n        \"\"\"\n        Calculate the fourier time lag of the cross spectrum. The time lag is\n        calculate using the center of the frequency bins.\n        \"\"\"\n        if self.__class__ in [Crossspectrum, AveragedCrossspectrum]:\n            ph_lag = self._phase_lag()\n    \n            return ph_lag / (2 * np.pi * self.freq)\n        else:\n            raise AttributeError(\"Object has no attribute named 'time_lag' !\")", "min_run_count": 2, "name": "bench_Powerspectrum.Powerspectrum.time_lag", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc921d5cf17cf438b9e5d451003a61866769ae1a98cfe74a21648ba1a6685a1b", "warmup_time": -1}, "bench_Powerspectrum.Rebin.peakmem_init": {"code": "class Rebin:\n    def peakmem_init(self, array_size):\n        self.pspec.rebin(df=0.01)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc)", "name": "bench_Powerspectrum.Rebin.peakmem_init", "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "0ecff3967458f74b6dacec0c21cab401dc1068675234f3108c4fedce674ced69"}, "bench_Powerspectrum.Rebin.time_init": {"code": "class Rebin:\n    def time_init(self, array_size):\n        self.pspec.rebin(df=0.01)\n\n    def setup(self, array_size):\n        times = np.arange(array_size)\n        counts = np.random.rand(array_size) * 100\n        lc = Lightcurve(times, counts, dt=1.0, skip_checks=True)\n    \n        self.pspec = Powerspectrum(lc)", "min_run_count": 2, "name": "bench_Powerspectrum.Rebin.time_init", "number": 0, "param_names": ["array_size"], "params": [["1000", "10000", "100000", "1000000", "10000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "84508efa91734583d790b185155d4964e16c7e0dbebacaa5cad990038bf48ee2", "warmup_time": -1}, "bench_imports.Dependencies.track_num_dependencies": {"code": "class Dependencies:\n    def track_num_dependencies(self):\n        return len(self.import_list)\n\n    def setup(self):\n        try:\n            with open('/home/apollo/stingray/setup.cfg', 'r+') as f_ptr:\n                content = f_ptr.read()\n    \n            substr1 = 'install_requires =\\n'\n            substr2 = '[options.entry_points]'\n    \n            start_idx = content.index(substr1)\n            end_idx = content.index(substr2)\n            start_idx += len(substr1)\n    \n            all_imports = content[start_idx:end_idx]\n            self.import_list = [\n                re.sub(r\"[^a-zA-Z]+\", '', char)\n                for char in all_imports.split(\"\\n\") if char\n            ]\n    \n        except (FileNotFoundError, ValueError):\n            exit()", "name": "bench_imports.Dependencies.track_num_dependencies", "param_names": [], "params": [], "timeout": 60.0, "type": "track", "unit": "unit", "version": "54b620bc2d9c8411e95a3d3d8374f7c0b5b603e52fe361418a748c5a6b249c7b"}, "bench_imports.Imports.peakmem_AveragedCovariancepectrum": {"code": "class Imports:\n    def peakmem_AveragedCovariancepectrum(self):\n        self.execute('from stingray import Lightcurve, Covariancespectrum')", "name": "bench_imports.Imports.peakmem_AveragedCovariancepectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0bcf903ec8a99e2739b609c4206fbcec8be5831a93f4085e41ded32ec379427c"}, "bench_imports.Imports.peakmem_AveragedCrossspectrum": {"code": "class Imports:\n    def peakmem_AveragedCrossspectrum(self):\n        self.execute('from stingray import Lightcurve, AveragedCrossspectrum')", "name": "bench_imports.Imports.peakmem_AveragedCrossspectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "2c947b6fc022095b2631db0f02b2ac323f98556d99be4aaf94aee6de8a89781d"}, "bench_imports.Imports.peakmem_AveragedPowerspectrum": {"code": "class Imports:\n    def peakmem_AveragedPowerspectrum(self):\n        self.execute('from stingray import Lightcurve, AveragedPowerspectrum')", "name": "bench_imports.Imports.peakmem_AveragedPowerspectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "465b13c2a93c9e2e93586051961a89539f11a92391772470aa60cee5577561e9"}, "bench_imports.Imports.peakmem_Bispectra": {"code": "class Imports:\n    def peakmem_Bispectra(self):\n        self.execute('from stingray.bispectrum import Bispectrum')", "name": "bench_imports.Imports.peakmem_Bispectra", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "dfa30f35238959606b67554f386c3a06ae4cfd536769419acc8214c8855378ba"}, "bench_imports.Imports.peakmem_Covariancepectrum": {"code": "class Imports:\n    def peakmem_Covariancepectrum(self):\n        self.execute('from stingray import Lightcurve, Covariancespectrum')", "name": "bench_imports.Imports.peakmem_Covariancepectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "1a701b25727b8fbe474d177dc992979a81aa4fc9261d4ced7b097c8a75f7adf5"}, "bench_imports.Imports.peakmem_CrossCorrelation": {"code": "class Imports:\n    def peakmem_CrossCorrelation(self):\n        self.execute('from stingray.crosscorrelation import CrossCorrelation')", "name": "bench_imports.Imports.peakmem_CrossCorrelation", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "8d83a472618d44b78f1b05e22346ee236e1b721bf372276412af82e792c60033"}, "bench_imports.Imports.peakmem_Crossspectrum": {"code": "class Imports:\n    def peakmem_Crossspectrum(self):\n        self.execute('from stingray import Lightcurve, Crossspectrum')", "name": "bench_imports.Imports.peakmem_Crossspectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "3654b1e252e3dec97dad73a24e1f59330c85204d1d771e940131bb3c8aa132a0"}, "bench_imports.Imports.peakmem_DynamicalPowerspectrum": {"code": "class Imports:\n    def peakmem_DynamicalPowerspectrum(self):\n        self.execute('from stingray import Lightcurve, DynamicalPowerspectrum')", "name": "bench_imports.Imports.peakmem_DynamicalPowerspectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9be1b3b5f542b92f93d1090931c5b762ec307d70284c26a16746cc154fed9b09"}, "bench_imports.Imports.peakmem_Lightcurve": {"code": "class Imports:\n    def peakmem_Lightcurve(self):\n        self.execute('from stingray import Lightcurve')", "name": "bench_imports.Imports.peakmem_Lightcurve", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "6109a21c60e8556794cec0ff913de48cbcb6ef70d537444ac1bee8713f43199a"}, "bench_imports.Imports.peakmem_Powerspectrum": {"code": "class Imports:\n    def peakmem_Powerspectrum(self):\n        self.execute('from stingray import Lightcurve, Powerspectrum')", "name": "bench_imports.Imports.peakmem_Powerspectrum", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "32bd324fe8b44016a00c792dee7496f556d8c8234b8de6adcbad98818630025d"}, "bench_imports.Imports.peakmem_stingray": {"code": "class Imports:\n    def peakmem_stingray(self):\n        self.execute('import stingray')", "name": "bench_imports.Imports.peakmem_stingray", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "00cd2e395e29f278104b4d90405b41b216458746e123fee4c3760097afb11cb1"}, "bench_imports.Imports.time_AveragedCovariancepectrum": {"code": "class Imports:\n    def time_AveragedCovariancepectrum(self):\n        self.execute('from stingray import Lightcurve, Covariancespectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_AveragedCovariancepectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "515c19e4a7cf66b5ba4051a2b538a330d5428b60c04e69eed277d05fd18ecff0", "warmup_time": -1}, "bench_imports.Imports.time_AveragedCrossspectrum": {"code": "class Imports:\n    def time_AveragedCrossspectrum(self):\n        self.execute('from stingray import Lightcurve, AveragedCrossspectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_AveragedCrossspectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "af2654394a687232d91b046263b1dea517be75728f79c2b678841f967f7038e4", "warmup_time": -1}, "bench_imports.Imports.time_AveragedPowerspectrum": {"code": "class Imports:\n    def time_AveragedPowerspectrum(self):\n        self.execute('from stingray import Lightcurve, AveragedPowerspectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_AveragedPowerspectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3e40388b721d2d4eb02869a62b3568c4da80ed815088d8f5815742005003cb59", "warmup_time": -1}, "bench_imports.Imports.time_Bispectra": {"code": "class Imports:\n    def time_Bispectra(self):\n        self.execute('from stingray.bispectrum import Bispectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_Bispectra", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "316d8ac210be12095428404b916a681a42efabc19a5bb72fd385b1948ae7ad27", "warmup_time": -1}, "bench_imports.Imports.time_Covariancepectrum": {"code": "class Imports:\n    def time_Covariancepectrum(self):\n        self.execute('from stingray import Lightcurve, Covariancespectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_Covariancepectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ea960146b9948a5a9c9ee91d1fa9a65248fae4f8fd05030b056c1ec1baf210cd", "warmup_time": -1}, "bench_imports.Imports.time_CrossCorrelation": {"code": "class Imports:\n    def time_CrossCorrelation(self):\n        self.execute('from stingray.crosscorrelation import CrossCorrelation')", "min_run_count": 2, "name": "bench_imports.Imports.time_CrossCorrelation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "25044e1e89d9e5a861b90da071d7315c1766a7a3f2766c876e6845bf8a257328", "warmup_time": -1}, "bench_imports.Imports.time_Crossspectrum": {"code": "class Imports:\n    def time_Crossspectrum(self):\n        self.execute('from stingray import Lightcurve, Crossspectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_Crossspectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "322ac347424abbdc7bc5f57826899669d27d9ba3246877c293b78310070f8286", "warmup_time": -1}, "bench_imports.Imports.time_DynamicalPowerspectrum": {"code": "class Imports:\n    def time_DynamicalPowerspectrum(self):\n        self.execute('from stingray import Lightcurve, DynamicalPowerspectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_DynamicalPowerspectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56619a6c15089560064b1637cd9d69151dcd2c45d1cc26ba98a72ce79968883c", "warmup_time": -1}, "bench_imports.Imports.time_Lightcurve": {"code": "class Imports:\n    def time_Lightcurve(self):\n        self.execute('from stingray import Lightcurve')", "min_run_count": 2, "name": "bench_imports.Imports.time_Lightcurve", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "19fa8d3dc3bdd1552828d19e886f79b2551a7eac1f5505fd6f44ef3787037dce", "warmup_time": -1}, "bench_imports.Imports.time_Powerspectrum": {"code": "class Imports:\n    def time_Powerspectrum(self):\n        self.execute('from stingray import Lightcurve, Powerspectrum')", "min_run_count": 2, "name": "bench_imports.Imports.time_Powerspectrum", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9eb4cd066225b5fd23c60d8d10af54a394600b15927f6243d8b0f8ce3fef5aae", "warmup_time": -1}, "bench_imports.Imports.time_stingray": {"code": "class Imports:\n    def time_stingray(self):\n        self.execute('import stingray')", "min_run_count": 2, "name": "bench_imports.Imports.time_stingray", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "762cfdb351b46eb71e2d2df411a046a3d8fafd8343ebe483e7da016ee87d1757", "warmup_time": -1}}, "machines": {"BeastMode": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz", "machine": "BeastMode", "num_cpu": "12", "os": "Linux 5.4.0-39-generic", "ram": "16009492", "version": 1}}, "tags": {"0.1rc1": 1913, "v0.1": 2144, "v0.1.1": 2160, "v0.1.2": 2162, "v0.1.3": 2165, "v0.2": 2512}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}